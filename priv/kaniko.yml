apiVersion: batch/v1
kind: Job
metadata:
  name: kaniko
spec:
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: air-run-sa
      containers:
        - name: kaniko-build
          image: gcr.io/kaniko-project/executor:latest
          imagePullPolicy: IfNotPresent
          args: ["--dockerfile=/workspace/Dockerfile",
                  "--context=dir://context-dir",
                  "--destination=k8s-registry:80/image-name",
                  "--registry-mirror=k8s-registry:80",
                  "--skip-tls-verify=true",
                  "--registry-certificate=k8s-registry=/certs/registry.crt",
                  "--cache=true",
                  "--cache-dir=/cache"]
          volumeMounts:
            - name: workspace-storage
              mountPath: /workspace
            - name: certs-vol
              mountPath: /certs
            - name: cache-vol
              mountPath: /cache
            - name: kaniko-secret-vol
              mountPath: /kaniko/.docker
              readOnly: true
        - name: kaniko-poll
          image: alpine:3.9
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - -c
            - >-
              apk add curl jq;
              sleep 10;

              while true;
              do
              sleep 5;

              container_state=$(curl
              --header "Accept: application/json" 
              --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
              --request GET
              --cert-type DER
              --cacert "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
              https://kubernetes.default.svc/api/v1/namespaces/default/pods/?labelSelector=job-name=job-name-here
              | jq '.items'
              | jq '.[0].status.containerStatuses'
              | jq '.[] | select(.name == "kaniko-build")'
              | jq '.state');
    
              echo "$container_state";
              running_type=$(echo $container_state | jq '.running' | jq 'type');
              if [[ $running_type != "\"null\"" ]]; then continue; fi;

              data=$(echo "$container_state" | jq '{status: ., "job-name": "job-name-here"}');
              curl
              --header "Content-Type:application/json"
              --request POST
              --user "$(echo $SERVICE_ACCOUNT_USERNAME):$(echo $SERVICE_ACCOUNT_PASSWORD)"
              --data $(echo "$data" | jq "tostring")
              http://air-run/api/deployments/build-callback;

              break;
              done;
              echo "Done"
          env:
            - name: "SERVICE_ACCOUNT_USERNAME"
              valueFrom:
                secretKeyRef:
                  key: username
                  name: air-run-service-account-basic-auth
            - name: "SERVICE_ACCOUNT_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: password
                  name: air-run-service-account-basic-auth
      restartPolicy: Never
      volumes:
        - name: certs-vol
          hostPath:
            path: /opt/certs
            type: Directory
        - name: cache-vol
          hostPath:
            path: /opt/kaniko-cache
            type: Directory
        - name: kaniko-secret-vol
          secret:
            secretName: kaniko-secret
        - name: "workspace-storage"
          persistentVolumeClaim:
            claimName: air-run-pv-claim
